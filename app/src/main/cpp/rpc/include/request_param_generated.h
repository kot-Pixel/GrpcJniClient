// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REQUESTPARAM_REQUEST_H_
#define FLATBUFFERS_GENERATED_REQUESTPARAM_REQUEST_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace request {

struct VoidRequest;
struct VoidRequestBuilder;

struct BoolRequest;
struct BoolRequestBuilder;

struct IntRequest;
struct IntRequestBuilder;

struct Int64Request;
struct Int64RequestBuilder;

struct FloatRequest;
struct FloatRequestBuilder;

struct DoubleRequest;
struct DoubleRequestBuilder;

struct StringRequest;
struct StringRequestBuilder;

struct BytesRequest;
struct BytesRequestBuilder;

struct VoidRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef VoidRequestBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct VoidRequestBuilder {
  typedef VoidRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit VoidRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<VoidRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<VoidRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<VoidRequest> CreateVoidRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  VoidRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct BoolRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BoolRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  bool value() const {
    return GetField<uint8_t>(VT_VALUE, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE, 1) &&
           verifier.EndTable();
  }
};

struct BoolRequestBuilder {
  typedef BoolRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(bool value) {
    fbb_.AddElement<uint8_t>(BoolRequest::VT_VALUE, static_cast<uint8_t>(value), 0);
  }
  explicit BoolRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BoolRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BoolRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BoolRequest> CreateBoolRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool value = false) {
  BoolRequestBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct IntRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IntRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  int32_t value() const {
    return GetField<int32_t>(VT_VALUE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_VALUE, 4) &&
           verifier.EndTable();
  }
};

struct IntRequestBuilder {
  typedef IntRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(int32_t value) {
    fbb_.AddElement<int32_t>(IntRequest::VT_VALUE, value, 0);
  }
  explicit IntRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<IntRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IntRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<IntRequest> CreateIntRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t value = 0) {
  IntRequestBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct Int64Request FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Int64RequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  int64_t value() const {
    return GetField<int64_t>(VT_VALUE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_VALUE, 8) &&
           verifier.EndTable();
  }
};

struct Int64RequestBuilder {
  typedef Int64Request Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(int64_t value) {
    fbb_.AddElement<int64_t>(Int64Request::VT_VALUE, value, 0);
  }
  explicit Int64RequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Int64Request> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Int64Request>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Int64Request> CreateInt64Request(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t value = 0) {
  Int64RequestBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct FloatRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FloatRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  float value() const {
    return GetField<float>(VT_VALUE, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_VALUE, 4) &&
           verifier.EndTable();
  }
};

struct FloatRequestBuilder {
  typedef FloatRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(float value) {
    fbb_.AddElement<float>(FloatRequest::VT_VALUE, value, 0.0f);
  }
  explicit FloatRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FloatRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FloatRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FloatRequest> CreateFloatRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float value = 0.0f) {
  FloatRequestBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct DoubleRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DoubleRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  double value() const {
    return GetField<double>(VT_VALUE, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_VALUE, 8) &&
           verifier.EndTable();
  }
};

struct DoubleRequestBuilder {
  typedef DoubleRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(double value) {
    fbb_.AddElement<double>(DoubleRequest::VT_VALUE, value, 0.0);
  }
  explicit DoubleRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DoubleRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DoubleRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DoubleRequest> CreateDoubleRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double value = 0.0) {
  DoubleRequestBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct StringRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StringRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct StringRequestBuilder {
  typedef StringRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(StringRequest::VT_VALUE, value);
  }
  explicit StringRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<StringRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<StringRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<StringRequest> CreateStringRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0) {
  StringRequestBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<StringRequest> CreateStringRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *value = nullptr) {
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return request::CreateStringRequest(
      _fbb,
      value__);
}

struct BytesRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BytesRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<uint8_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct BytesRequestBuilder {
  typedef BytesRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> value) {
    fbb_.AddOffset(BytesRequest::VT_VALUE, value);
  }
  explicit BytesRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BytesRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BytesRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BytesRequest> CreateBytesRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> value = 0) {
  BytesRequestBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<BytesRequest> CreateBytesRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<uint8_t>(*value) : 0;
  return request::CreateBytesRequest(
      _fbb,
      value__);
}

}  // namespace request

#endif  // FLATBUFFERS_GENERATED_REQUESTPARAM_REQUEST_H_
