// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RESPONSEPARAM_RESPONSE_H_
#define FLATBUFFERS_GENERATED_RESPONSEPARAM_RESPONSE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace response {

struct VoidResponse;
struct VoidResponseBuilder;

struct BoolResponse;
struct BoolResponseBuilder;

struct IntResponse;
struct IntResponseBuilder;

struct Int64Response;
struct Int64ResponseBuilder;

struct FloatResponse;
struct FloatResponseBuilder;

struct DoubleResponse;
struct DoubleResponseBuilder;

struct StringResponse;
struct StringResponseBuilder;

struct BytesResponse;
struct BytesResponseBuilder;

struct VoidResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef VoidResponseBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct VoidResponseBuilder {
  typedef VoidResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit VoidResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<VoidResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<VoidResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<VoidResponse> CreateVoidResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  VoidResponseBuilder builder_(_fbb);
  return builder_.Finish();
}

struct BoolResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BoolResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  bool value() const {
    return GetField<uint8_t>(VT_VALUE, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE, 1) &&
           verifier.EndTable();
  }
};

struct BoolResponseBuilder {
  typedef BoolResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(bool value) {
    fbb_.AddElement<uint8_t>(BoolResponse::VT_VALUE, static_cast<uint8_t>(value), 0);
  }
  explicit BoolResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BoolResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BoolResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BoolResponse> CreateBoolResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool value = false) {
  BoolResponseBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct IntResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IntResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  int32_t value() const {
    return GetField<int32_t>(VT_VALUE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_VALUE, 4) &&
           verifier.EndTable();
  }
};

struct IntResponseBuilder {
  typedef IntResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(int32_t value) {
    fbb_.AddElement<int32_t>(IntResponse::VT_VALUE, value, 0);
  }
  explicit IntResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<IntResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IntResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<IntResponse> CreateIntResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t value = 0) {
  IntResponseBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct Int64Response FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Int64ResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  int64_t value() const {
    return GetField<int64_t>(VT_VALUE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_VALUE, 8) &&
           verifier.EndTable();
  }
};

struct Int64ResponseBuilder {
  typedef Int64Response Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(int64_t value) {
    fbb_.AddElement<int64_t>(Int64Response::VT_VALUE, value, 0);
  }
  explicit Int64ResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Int64Response> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Int64Response>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Int64Response> CreateInt64Response(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t value = 0) {
  Int64ResponseBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct FloatResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FloatResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  float value() const {
    return GetField<float>(VT_VALUE, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_VALUE, 4) &&
           verifier.EndTable();
  }
};

struct FloatResponseBuilder {
  typedef FloatResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(float value) {
    fbb_.AddElement<float>(FloatResponse::VT_VALUE, value, 0.0f);
  }
  explicit FloatResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FloatResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FloatResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FloatResponse> CreateFloatResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float value = 0.0f) {
  FloatResponseBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct DoubleResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DoubleResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  double value() const {
    return GetField<double>(VT_VALUE, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_VALUE, 8) &&
           verifier.EndTable();
  }
};

struct DoubleResponseBuilder {
  typedef DoubleResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(double value) {
    fbb_.AddElement<double>(DoubleResponse::VT_VALUE, value, 0.0);
  }
  explicit DoubleResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DoubleResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DoubleResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DoubleResponse> CreateDoubleResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double value = 0.0) {
  DoubleResponseBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct StringResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StringResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct StringResponseBuilder {
  typedef StringResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(StringResponse::VT_VALUE, value);
  }
  explicit StringResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<StringResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<StringResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<StringResponse> CreateStringResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0) {
  StringResponseBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<StringResponse> CreateStringResponseDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *value = nullptr) {
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return response::CreateStringResponse(
      _fbb,
      value__);
}

struct BytesResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BytesResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<uint8_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct BytesResponseBuilder {
  typedef BytesResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> value) {
    fbb_.AddOffset(BytesResponse::VT_VALUE, value);
  }
  explicit BytesResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BytesResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BytesResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BytesResponse> CreateBytesResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> value = 0) {
  BytesResponseBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<BytesResponse> CreateBytesResponseDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<uint8_t>(*value) : 0;
  return response::CreateBytesResponse(
      _fbb,
      value__);
}

}  // namespace response

#endif  // FLATBUFFERS_GENERATED_RESPONSEPARAM_RESPONSE_H_
