// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RPC_RPC_H_
#define FLATBUFFERS_GENERATED_RPC_RPC_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace rpc {

struct RpcMessage;
struct RpcMessageBuilder;

enum RpcMessageType : int8_t {
  RpcMessageType_REQUEST = 0,
  RpcMessageType_RESPONSE = 1,
  RpcMessageType_MIN = RpcMessageType_REQUEST,
  RpcMessageType_MAX = RpcMessageType_RESPONSE
};

inline const RpcMessageType (&EnumValuesRpcMessageType())[2] {
  static const RpcMessageType values[] = {
    RpcMessageType_REQUEST,
    RpcMessageType_RESPONSE
  };
  return values;
}

inline const char * const *EnumNamesRpcMessageType() {
  static const char * const names[3] = {
    "REQUEST",
    "RESPONSE",
    nullptr
  };
  return names;
}

inline const char *EnumNameRpcMessageType(RpcMessageType e) {
  if (::flatbuffers::IsOutRange(e, RpcMessageType_REQUEST, RpcMessageType_RESPONSE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRpcMessageType()[index];
}

struct RpcMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RpcMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_ID = 6,
    VT_METHOD = 8,
    VT_PAYLOAD = 10
  };
  rpc::RpcMessageType type() const {
    return static_cast<rpc::RpcMessageType>(GetField<int8_t>(VT_TYPE, 0));
  }
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const ::flatbuffers::String *method() const {
    return GetPointer<const ::flatbuffers::String *>(VT_METHOD);
  }
  const ::flatbuffers::Vector<uint8_t> *payload() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_PAYLOAD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_METHOD) &&
           verifier.VerifyString(method()) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           verifier.VerifyVector(payload()) &&
           verifier.EndTable();
  }
};

struct RpcMessageBuilder {
  typedef RpcMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(rpc::RpcMessageType type) {
    fbb_.AddElement<int8_t>(RpcMessage::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(RpcMessage::VT_ID, id, 0);
  }
  void add_method(::flatbuffers::Offset<::flatbuffers::String> method) {
    fbb_.AddOffset(RpcMessage::VT_METHOD, method);
  }
  void add_payload(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> payload) {
    fbb_.AddOffset(RpcMessage::VT_PAYLOAD, payload);
  }
  explicit RpcMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RpcMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RpcMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RpcMessage> CreateRpcMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    rpc::RpcMessageType type = rpc::RpcMessageType_REQUEST,
    uint32_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> method = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> payload = 0) {
  RpcMessageBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_method(method);
  builder_.add_id(id);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RpcMessage> CreateRpcMessageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    rpc::RpcMessageType type = rpc::RpcMessageType_REQUEST,
    uint32_t id = 0,
    const char *method = nullptr,
    const std::vector<uint8_t> *payload = nullptr) {
  auto method__ = method ? _fbb.CreateString(method) : 0;
  auto payload__ = payload ? _fbb.CreateVector<uint8_t>(*payload) : 0;
  return rpc::CreateRpcMessage(
      _fbb,
      type,
      id,
      method__,
      payload__);
}

}  // namespace rpc

#endif  // FLATBUFFERS_GENERATED_RPC_RPC_H_
