// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BLUETOOTH_BLUETOOTH_H_
#define FLATBUFFERS_GENERATED_BLUETOOTH_BLUETOOTH_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace bluetooth {

struct BtRfcommData;
struct BtRfcommDataBuilder;

struct BtRfcommData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BtRfcommDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4,
    VT_LENGTH = 6
  };
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  int32_t length() const {
    return GetField<int32_t>(VT_LENGTH, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           VerifyField<int32_t>(verifier, VT_LENGTH, 4) &&
           verifier.EndTable();
  }
};

struct BtRfcommDataBuilder {
  typedef BtRfcommData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(BtRfcommData::VT_DATA, data);
  }
  void add_length(int32_t length) {
    fbb_.AddElement<int32_t>(BtRfcommData::VT_LENGTH, length, 0);
  }
  explicit BtRfcommDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BtRfcommData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BtRfcommData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BtRfcommData> CreateBtRfcommData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0,
    int32_t length = 0) {
  BtRfcommDataBuilder builder_(_fbb);
  builder_.add_length(length);
  builder_.add_data(data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<BtRfcommData> CreateBtRfcommDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr,
    int32_t length = 0) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return bluetooth::CreateBtRfcommData(
      _fbb,
      data__,
      length);
}

}  // namespace bluetooth

#endif  // FLATBUFFERS_GENERATED_BLUETOOTH_BLUETOOTH_H_
