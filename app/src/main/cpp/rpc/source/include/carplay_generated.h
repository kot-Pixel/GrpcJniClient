// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CARPLAY_CARPLAY_H_
#define FLATBUFFERS_GENERATED_CARPLAY_CARPLAY_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace carplay {

struct CarPlayAvailability;
struct CarPlayAvailabilityBuilder;

struct CarPlayAvailability FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CarPlayAvailabilityBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WIRED_AVAILABLE = 4,
    VT_USB_TRANSPORT_IDENTIFIER = 6,
    VT_WIRELESS_AVAILABLE = 8,
    VT_BLUETOOTH_TRANSPORT_IDENTIFIER = 10
  };
  bool wired_available() const {
    return GetField<uint8_t>(VT_WIRED_AVAILABLE, 0) != 0;
  }
  const ::flatbuffers::String *usb_transport_identifier() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USB_TRANSPORT_IDENTIFIER);
  }
  bool wireless_available() const {
    return GetField<uint8_t>(VT_WIRELESS_AVAILABLE, 0) != 0;
  }
  const ::flatbuffers::String *bluetooth_transport_identifier() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BLUETOOTH_TRANSPORT_IDENTIFIER);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_WIRED_AVAILABLE, 1) &&
           VerifyOffset(verifier, VT_USB_TRANSPORT_IDENTIFIER) &&
           verifier.VerifyString(usb_transport_identifier()) &&
           VerifyField<uint8_t>(verifier, VT_WIRELESS_AVAILABLE, 1) &&
           VerifyOffset(verifier, VT_BLUETOOTH_TRANSPORT_IDENTIFIER) &&
           verifier.VerifyString(bluetooth_transport_identifier()) &&
           verifier.EndTable();
  }
};

struct CarPlayAvailabilityBuilder {
  typedef CarPlayAvailability Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_wired_available(bool wired_available) {
    fbb_.AddElement<uint8_t>(CarPlayAvailability::VT_WIRED_AVAILABLE, static_cast<uint8_t>(wired_available), 0);
  }
  void add_usb_transport_identifier(::flatbuffers::Offset<::flatbuffers::String> usb_transport_identifier) {
    fbb_.AddOffset(CarPlayAvailability::VT_USB_TRANSPORT_IDENTIFIER, usb_transport_identifier);
  }
  void add_wireless_available(bool wireless_available) {
    fbb_.AddElement<uint8_t>(CarPlayAvailability::VT_WIRELESS_AVAILABLE, static_cast<uint8_t>(wireless_available), 0);
  }
  void add_bluetooth_transport_identifier(::flatbuffers::Offset<::flatbuffers::String> bluetooth_transport_identifier) {
    fbb_.AddOffset(CarPlayAvailability::VT_BLUETOOTH_TRANSPORT_IDENTIFIER, bluetooth_transport_identifier);
  }
  explicit CarPlayAvailabilityBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CarPlayAvailability> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CarPlayAvailability>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CarPlayAvailability> CreateCarPlayAvailability(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool wired_available = false,
    ::flatbuffers::Offset<::flatbuffers::String> usb_transport_identifier = 0,
    bool wireless_available = false,
    ::flatbuffers::Offset<::flatbuffers::String> bluetooth_transport_identifier = 0) {
  CarPlayAvailabilityBuilder builder_(_fbb);
  builder_.add_bluetooth_transport_identifier(bluetooth_transport_identifier);
  builder_.add_usb_transport_identifier(usb_transport_identifier);
  builder_.add_wireless_available(wireless_available);
  builder_.add_wired_available(wired_available);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CarPlayAvailability> CreateCarPlayAvailabilityDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool wired_available = false,
    const char *usb_transport_identifier = nullptr,
    bool wireless_available = false,
    const char *bluetooth_transport_identifier = nullptr) {
  auto usb_transport_identifier__ = usb_transport_identifier ? _fbb.CreateString(usb_transport_identifier) : 0;
  auto bluetooth_transport_identifier__ = bluetooth_transport_identifier ? _fbb.CreateString(bluetooth_transport_identifier) : 0;
  return carplay::CreateCarPlayAvailability(
      _fbb,
      wired_available,
      usb_transport_identifier__,
      wireless_available,
      bluetooth_transport_identifier__);
}

}  // namespace carplay

#endif  // FLATBUFFERS_GENERATED_CARPLAY_CARPLAY_H_
